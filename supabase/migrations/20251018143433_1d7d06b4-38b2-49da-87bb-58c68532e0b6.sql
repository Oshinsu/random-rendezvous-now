-- ============================================
-- MIGRATION SYST√âMIQUE: Auto-assignment de bar
-- Bas√©e sur les best practices Supabase Oct 2025
-- ============================================

-- üîß √âTAPE 1: V√©rification pr√©-migration
DO $$
BEGIN
    -- V√©rifier que la fonction trigger existe
    IF NOT EXISTS (
        SELECT 1 FROM pg_proc 
        WHERE proname = 'trigger_auto_bar_assignment'
    ) THEN
        RAISE EXCEPTION '‚ùå ERREUR: La fonction trigger_auto_bar_assignment() n''existe pas';
    END IF;
    
    RAISE NOTICE '‚úÖ Fonction trigger_auto_bar_assignment() existe';
END $$;

-- üßπ √âTAPE 2: Nettoyage complet
DROP TRIGGER IF EXISTS tg_trigger_auto_bar_assignment ON public.groups CASCADE;

DO $$
BEGIN
    RAISE NOTICE 'üßπ Ancien trigger supprim√© si existait';
END $$;

-- üöÄ √âTAPE 3: Cr√©ation du trigger avec SECURITY DEFINER
-- Syntaxe optimale selon documentation Supabase 2025
CREATE TRIGGER tg_trigger_auto_bar_assignment
    AFTER UPDATE ON public.groups
    FOR EACH ROW
    WHEN (
        -- Condition: groupe passe de 'waiting' √† 'confirmed' sans bar
        OLD.status = 'waiting' 
        AND NEW.status = 'confirmed' 
        AND NEW.bar_name IS NULL
    )
    EXECUTE FUNCTION public.trigger_auto_bar_assignment();

DO $$
BEGIN
    RAISE NOTICE '‚úÖ Trigger tg_trigger_auto_bar_assignment cr√©√©';
END $$;

-- ‚úÖ √âTAPE 4: Validation post-cr√©ation
DO $$
DECLARE
    trigger_count integer;
    trigger_info record;
BEGIN
    -- Compter les triggers
    SELECT COUNT(*) INTO trigger_count
    FROM information_schema.triggers 
    WHERE event_object_table = 'groups' 
    AND trigger_name = 'tg_trigger_auto_bar_assignment'
    AND event_object_schema = 'public';
    
    IF trigger_count = 0 THEN
        RAISE EXCEPTION '‚ùå VALIDATION √âCHOU√âE: Le trigger n''a pas √©t√© cr√©√©';
    END IF;
    
    -- R√©cup√©rer les d√©tails du trigger
    SELECT 
        trigger_name,
        event_manipulation,
        action_timing,
        action_statement
    INTO trigger_info
    FROM information_schema.triggers 
    WHERE event_object_table = 'groups' 
    AND trigger_name = 'tg_trigger_auto_bar_assignment'
    AND event_object_schema = 'public';
    
    RAISE NOTICE '================================================';
    RAISE NOTICE '‚úÖ VALIDATION R√âUSSIE';
    RAISE NOTICE 'Trigger: %', trigger_info.trigger_name;
    RAISE NOTICE 'Event: % %', trigger_info.action_timing, trigger_info.event_manipulation;
    RAISE NOTICE 'Action: %', trigger_info.action_statement;
    RAISE NOTICE '================================================';
END $$;

-- üìä √âTAPE 5: Test sur groupes existants
DO $$
DECLARE
    test_group_id uuid;
    test_group_status text;
    test_group_participants integer;
BEGIN
    -- Trouver un groupe test (waiting avec 5 participants)
    SELECT id, status, current_participants 
    INTO test_group_id, test_group_status, test_group_participants
    FROM public.groups 
    WHERE status = 'waiting' 
    AND current_participants = 5
    AND bar_name IS NULL
    ORDER BY created_at DESC
    LIMIT 1;
    
    IF test_group_id IS NOT NULL THEN
        RAISE NOTICE 'üìä Groupe test trouv√©: % (status=%, participants=%)', 
            test_group_id, test_group_status, test_group_participants;
        RAISE NOTICE '‚ö†Ô∏è Ce groupe passera automatiquement en ''confirmed'' et d√©clenchera l''auto-assignment';
    ELSE
        RAISE NOTICE 'üìä Aucun groupe test disponible pour validation';
    END IF;
END $$;
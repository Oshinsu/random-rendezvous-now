
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.50.0'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

// Fonction de filtrage RENFORC√âE pour identifier les vrais bars/pubs (identique √† simple-bar-search)
const isRealBarOrPub = (place: any): boolean => {
  const name = place.displayName?.text?.toLowerCase() || '';
  const address = place.formattedAddress?.toLowerCase() || '';
  const types = place.types || [];
  const primaryType = place.primaryType || '';

  console.log('üîç Analyse RENFORC√âE du lieu:', {
    name: place.displayName?.text,
    types: types,
    primaryType: primaryType,
    address: place.formattedAddress
  });

  // Mots-cl√©s n√©gatifs √âTENDUS - incluant les √©tablissements mixtes
  const negativeKeywords = [
    'restaurant', 'caf√©', 'pizzeria', 'brasserie', 'bistrot', 'grill',
    'steakhouse', 'burger', 'sandwich', 'tacos', 'sushi', 'kebab',
    'cr√™perie', 'glacier', 'p√¢tisserie', 'boulangerie', 'fast food',
    'mcdo', 'kfc', 'subway', 'quick', 'domino', 'pizza hut',
    'h√¥tel', 'hotel', 'resort', 'auberge', 'g√Æte', 'camping',
    'villa', 'resort', 'spa', 'wellness', 'relax', 'd√©tente',
    'supermarch√©', '√©picerie', 'magasin', 'boutique', 'pharmacie',
    'station service', 'essence', 'garage', 'centre commercial',
    '√©cole', 'universit√©', 'h√¥pital', 'clinique', 'mairie',
    '√©glise', 'temple', 'mosqu√©e', 'synagogue'
  ];

  // V√©rifier les mots-cl√©s n√©gatifs dans le nom et l'adresse
  const hasNegativeKeyword = negativeKeywords.some(keyword => 
    name.includes(keyword) || address.includes(keyword)
  );

  if (hasNegativeKeyword) {
    console.log('‚ùå Lieu rejet√© - mot-cl√© n√©gatif trouv√©:', negativeKeywords.find(k => name.includes(k) || address.includes(k)));
    return false;
  }

  // Types Google Places √† √©viter - LISTE √âTENDUE
  const negativeTypes = [
    'restaurant', 'meal_takeaway', 'meal_delivery', 'food',
    'cafe', 'bakery', 'grocery_or_supermarket', 'convenience_store',
    'gas_station', 'lodging', 'hospital', 'pharmacy', 'school',
    'university', 'church', 'mosque', 'synagogue', 'temple',
    'hotel', 'spa', 'resort'
  ];

  // R√àGLE STRICTE: Rejeter si type principal est n√©gatif
  if (negativeTypes.includes(primaryType)) {
    console.log('‚ùå Lieu rejet√© - type principal n√©gatif:', primaryType);
    return false;
  }

  // R√àGLE STRICTE: Rejeter les √©tablissements mixtes bar+restaurant
  const hasBarType = types.includes('bar');
  const hasRestaurantType = types.includes('restaurant') || types.includes('food');
  
  if (hasBarType && hasRestaurantType) {
    console.log('‚ùå Lieu rejet√© - √©tablissement mixte bar+restaurant d√©tect√©');
    return false;
  }

  // R√àGLE STRICTE: Rejeter si trop de types n√©gatifs sont pr√©sents
  const negativeTypesFound = types.filter((type: string) => negativeTypes.includes(type));
  if (negativeTypesFound.length > 0) {
    console.log('‚ùå Lieu rejet√© - types n√©gatifs trouv√©s:', negativeTypesFound);
    return false;
  }

  // Types positifs STRICTS pour les bars/pubs PURS
  const strictPositiveTypes = ['bar', 'pub', 'liquor_store', 'night_club'];
  const hasStrictPositiveType = types.some((type: string) => strictPositiveTypes.includes(type)) || 
                               strictPositiveTypes.includes(primaryType);

  if (!hasStrictPositiveType) {
    console.log('‚ùå Lieu rejet√© - aucun type strict positif trouv√©');
    return false;
  }

  // V√âRIFICATION FINALE: Privil√©gier les bars/pubs purs
  if (primaryType === 'bar' || primaryType === 'pub') {
    console.log('‚úÖ Lieu accept√© - bar/pub pur avec type principal:', primaryType);
    return true;
  }

  console.log('‚ö†Ô∏è Lieu accept√© avec r√©serve - type principal:', primaryType);
  return true;
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  const supabaseUrl = Deno.env.get('SUPABASE_URL')!
  const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
  const supabase = createClient(supabaseUrl, supabaseServiceKey)

  try {
    const { group_id, latitude, longitude } = await req.json()

    if (!group_id) {
      return new Response(
        JSON.stringify({ success: false, error: 'group_id requis' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    console.log('ü§ñ [AUTO-ASSIGN RENFORC√â] Attribution pour:', group_id);

    // V√©rifier l'√©ligibilit√© du groupe
    const { data: group, error: groupError } = await supabase
      .from('groups')
      .select('current_participants, status, bar_name')
      .eq('id', group_id)
      .single();

    if (groupError || !group) {
      return new Response(
        JSON.stringify({ success: false, error: 'Groupe introuvable' }),
        { status: 404, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    if (group.current_participants !== 5 || group.status !== 'confirmed' || group.bar_name) {
      return new Response(
        JSON.stringify({ success: false, error: 'Groupe non √©ligible' }),
        { status: 422, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    // Coordonn√©es avec fallback
    const searchLatitude = latitude || 48.8566;
    const searchLongitude = longitude || 2.3522;

    // Recherche RENFORC√âE de bars avec rayon √©tendu
    const apiKey = Deno.env.get('GOOGLE_PLACES_API_KEY')
    if (!apiKey) {
      return new Response(
        JSON.stringify({ success: false, error: 'Configuration manquante' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    console.log('üîç Recherche RENFORC√âE de bars pour:', { searchLatitude, searchLongitude });

    const searchUrl = `https://places.googleapis.com/v1/places:searchNearby`;
    const requestBody = {
      includedTypes: ["bar", "pub"],
      locationRestriction: {
        circle: {
          center: { latitude: searchLatitude, longitude: searchLongitude },
          radius: 10000 // AUGMENT√â √† 10km
        }
      },
      maxResultCount: 20,
      languageCode: "fr-FR"
    };

    const response = await fetch(searchUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Goog-Api-Key': apiKey,
        'X-Goog-FieldMask': 'places.id,places.displayName,places.formattedAddress,places.location,places.currentOpeningHours,places.regularOpeningHours,places.types,places.primaryType'
      },
      body: JSON.stringify(requestBody)
    });

    const data = await response.json();

    if (!data.places || data.places.length === 0) {
      return new Response(
        JSON.stringify({ success: false, error: 'Aucun bar trouv√©' }),
        { status: 404, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    console.log('üìä Lieux trouv√©s avec rayon 10km:', data.places.length);

    // Filter only OPEN bars/pubs
    const openBars = data.places.filter(place => {
      const currentHours = place.currentOpeningHours;
      if (currentHours && currentHours.openNow !== undefined) {
        return currentHours.openNow === true;
      }
      return true; // If no current hours info, allow it
    });

    console.log('üïê Lieux ouverts:', openBars.length);

    // Apply REINFORCED filtering for PURE bars/pubs
    const pureBars = openBars.filter(isRealBarOrPub);

    console.log('üç∫ Bars PURS apr√®s filtrage renforc√©:', pureBars.length);

    // STRICT fallback - prefer pure bars, but allow open bars if none
    let selectedBars = pureBars;
    if (pureBars.length === 0) {
      console.log('‚ö†Ô∏è Aucun bar pur trouv√©, fallback vers lieux ouverts');
      // Apply lighter filtering for fallback
      selectedBars = openBars.filter(place => {
        const types = place.types || [];
        const hasBar = types.includes('bar') || types.includes('pub');
        const hasRestaurant = types.includes('restaurant');
        // At least require bar/pub type and avoid pure restaurants
        return hasBar && !hasRestaurant;
      });
    }

    if (selectedBars.length === 0) {
      console.log('‚ùå Aucun bar appropri√© trouv√© m√™me avec fallback');
      return new Response(
        JSON.stringify({ success: false, error: 'Aucun bar appropri√© trouv√©' }),
        { status: 404, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    // S√©lection al√©atoire parmi les bars FILTR√âS
    const randomBar = selectedBars[Math.floor(Math.random() * selectedBars.length)];
    
    const result = {
      success: true,
      bar: {
        place_id: randomBar.id,
        name: randomBar.displayName?.text || `Bar ${randomBar.id.slice(-8)}`,
        formatted_address: randomBar.formattedAddress || 'Adresse non disponible',
        geometry: {
          location: {
            lat: randomBar.location.latitude,
            lng: randomBar.location.longitude
          }
        }
      }
    };

    console.log('üé≤ Bar s√©lectionn√© (filtrage renforc√©):', result.bar.name);
    console.log('üìä Stats FINALES - Total:', data.places.length, 'Ouverts:', openBars.length, 'Bars purs:', pureBars.length, 'S√©lectionn√©s:', selectedBars.length);

    return new Response(
      JSON.stringify(result),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )

  } catch (error) {
    console.error('‚ùå Erreur:', error);
    return new Response(
      JSON.stringify({ success: false, error: 'Erreur serveur' }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )
  }
})

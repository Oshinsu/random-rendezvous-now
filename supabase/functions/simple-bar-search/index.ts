
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

// Fonction de filtrage AM√âLIOR√âE pour identifier les vrais bars/pubs
const isRealBarOrPub = (place: any): boolean => {
  const name = place.displayName?.text?.toLowerCase() || '';
  const address = place.formattedAddress?.toLowerCase() || '';
  const types = place.types || [];
  const primaryType = place.primaryType || '';

  console.log('üîç [FILTRAGE AVANC√â] Analyse du lieu:', {
    name: place.displayName?.text,
    types: types,
    primaryType: primaryType,
    address: place.formattedAddress
  });

  // √âTAPE 1: Mots-cl√©s TR√àS n√©gatifs - exclusion imm√©diate
  const criticalNegativeKeywords = [
    'moto', 'motorcycle', 'harley', 'yamaha', 'honda', 'kawasaki', 'suzuki',
    'concessionnaire', 'dealer', 'garage moto', 'bike shop',
    '√©cole', 'university', 'h√¥pital', 'clinique', 'mairie', 'pr√©fecture',
    '√©glise', 'temple', 'mosqu√©e', 'synagogue', 'cath√©drale',
    'pharmacie', 'station service', 'essence', 'total', 'shell',
    'supermarch√©', 'carrefour', 'leclerc', 'champion', 'g√©ant',
    'magasin', 'boutique', 'centre commercial', 'mall'
  ];

  const hasCriticalNegative = criticalNegativeKeywords.some(keyword => 
    name.includes(keyword) || address.includes(keyword)
  );

  if (hasCriticalNegative) {
    console.log('‚ùå [FILTRAGE] Lieu REJET√â - mot-cl√© critique trouv√©');
    return false;
  }

  // √âTAPE 2: V√©rification des mots-cl√©s POSITIFS prioritaires
  const highPriorityKeywords = ['bar', 'pub', 'brasserie', 'taverne', 'lounge'];
  const hasHighPriorityKeyword = highPriorityKeywords.some(keyword => name.includes(keyword));

  if (hasHighPriorityKeyword) {
    console.log('‚úÖ [FILTRAGE] Lieu ACCEPT√â - mot-cl√© prioritaire trouv√©:', name);
    return true;
  }

  // √âTAPE 3: Types Google Places - v√©rification flexible
  const acceptableTypes = [
    'bar', 'pub', 'establishment', 'night_club', 'liquor_store'
  ];

  const hasAcceptableType = types.some((type: string) => acceptableTypes.includes(type)) || 
                           acceptableTypes.includes(primaryType);

  // √âTAPE 4: Gestion sp√©ciale des bar-restaurants
  const isBarRestaurant = (types.includes('bar') && types.includes('restaurant')) ||
                         (primaryType === 'bar' && types.includes('restaurant')) ||
                         (primaryType === 'restaurant' && types.includes('bar'));

  if (isBarRestaurant) {
    console.log('üçΩÔ∏è [FILTRAGE] Bar-restaurant d√©tect√© - ACCEPT√â:', name);
    return true;
  }

  // √âTAPE 5: Exclusion des restaurants purs (sans composante bar)
  if (primaryType === 'restaurant' && !types.includes('bar')) {
    console.log('‚ùå [FILTRAGE] Restaurant pur - REJET√â');
    return false;
  }

  // √âTAPE 6: D√©cision finale bas√©e sur les types
  if (hasAcceptableType) {
    console.log('‚úÖ [FILTRAGE] Lieu ACCEPT√â - type acceptable trouv√©');
    return true;
  }

  console.log('‚ùå [FILTRAGE] Lieu REJET√â - aucun crit√®re accept√©');
  return false;
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { latitude, longitude } = await req.json()

    if (!latitude || !longitude) {
      return new Response(
        JSON.stringify({ error: 'Coordonn√©es requises' }),
        { 
          status: 400, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    }

    const apiKey = Deno.env.get('GOOGLE_PLACES_API_KEY')
    if (!apiKey) {
      console.error('‚ùå Cl√© API manquante')
      return new Response(
        JSON.stringify({ error: 'Configuration manquante' }),
        { 
          status: 500, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    }

    console.log('üîç [RECHERCHE AM√âLIOR√âE] Recherche de bars √† Fort-de-France:', { latitude, longitude });

    // Recherche √©largie avec types multiples
    const searchUrl = `https://places.googleapis.com/v1/places:searchNearby`;
    const requestBody = {
      includedTypes: ["bar", "pub", "restaurant", "night_club"],
      locationRestriction: {
        circle: {
          center: { latitude, longitude },
          radius: 8000 // Rayon √©largi pour Fort-de-France
        }
      },
      maxResultCount: 20,
      languageCode: "fr-FR"
    };

    console.log('üì° [API REQUEST] Requ√™te vers Google Places:', JSON.stringify(requestBody, null, 2));

    const response = await fetch(searchUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Goog-Api-Key': apiKey,
        'X-Goog-FieldMask': 'places.id,places.displayName,places.formattedAddress,places.location,places.currentOpeningHours,places.regularOpeningHours,places.types,places.primaryType'
      },
      body: JSON.stringify(requestBody)
    });

    if (!response.ok) {
      console.error('‚ùå [API ERROR] Erreur HTTP:', response.status, await response.text());
      return new Response(
        JSON.stringify({ error: `Erreur API: ${response.status}` }),
        { 
          status: response.status, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    }

    const data = await response.json();
    console.log('üìä [API RESPONSE] R√©ponse compl√®te:', JSON.stringify(data, null, 2));

    if (!data.places || data.places.length === 0) {
      console.log('‚ö†Ô∏è [AUCUN R√âSULTAT] Google Places n\'a retourn√© aucun lieu');
      return new Response(
        JSON.stringify({ error: 'Aucun lieu trouv√© par Google Places' }),
        { 
          status: 404, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    }

    console.log('üìã [R√âSULTATS BRUTS] Lieux trouv√©s initialement:', data.places.length);

    // Filtrage des lieux ouverts
    const openPlaces = data.places.filter(place => {
      const currentHours = place.currentOpeningHours;
      if (currentHours && currentHours.openNow !== undefined) {
        return currentHours.openNow === true;
      }
      return true; // Si pas d'info, on assume ouvert
    });

    console.log('üïê [FILTRAGE HORAIRES] Lieux potentiellement ouverts:', openPlaces.length);

    // Application du filtrage avanc√©
    const realBars = openPlaces.filter(isRealBarOrPub);

    console.log('üç∫ [FILTRAGE FINAL] Vrais bars apr√®s filtrage:', realBars.length);

    // Log d√©taill√© des bars s√©lectionn√©s
    realBars.forEach((bar, index) => {
      console.log(`üèÜ [BAR ${index + 1}] ${bar.displayName?.text} - Types: [${bar.types?.join(', ')}] - Primary: ${bar.primaryType}`);
    });

    // Fallback si aucun bar trouv√©
    let selectedBars = realBars;
    if (realBars.length === 0) {
      console.log('‚ö†Ô∏è [FALLBACK] Aucun vrai bar trouv√©, utilisation de tous les lieux ouverts');
      selectedBars = openPlaces;
    }

    if (selectedBars.length === 0) {
      return new Response(
        JSON.stringify({ error: 'Aucun bar ouvert trouv√© malgr√© le filtrage √©largi' }),
        { 
          status: 404, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    }

    // S√©lection al√©atoire avec priorit√© aux bars avec mots-cl√©s
    const priorityBars = selectedBars.filter(bar => {
      const name = bar.displayName?.text?.toLowerCase() || '';
      return ['bar', 'pub', 'brasserie', 'taverne', 'lounge'].some(keyword => name.includes(keyword));
    });

    const finalSelection = priorityBars.length > 0 ? priorityBars : selectedBars;
    const randomBar = finalSelection[Math.floor(Math.random() * finalSelection.length)];
    
    const result = {
      place_id: randomBar.id,
      name: randomBar.displayName?.text || `Bar ${randomBar.id.slice(-8)}`,
      formatted_address: randomBar.formattedAddress || 'Adresse non disponible',
      geometry: {
        location: {
          lat: randomBar.location.latitude,
          lng: randomBar.location.longitude
        }
      }
    };

    console.log('üéØ [S√âLECTION FINALE] Bar s√©lectionn√©:', {
      name: result.name,
      types: randomBar.types,
      primaryType: randomBar.primaryType,
      wasPriority: priorityBars.length > 0
    });

    console.log('üìä [STATISTIQUES] R√©sum√© de la recherche:', {
      totalFound: data.places.length,
      openPlaces: openPlaces.length,
      realBars: realBars.length,
      priorityBars: priorityBars.length,
      finalSelection: finalSelection.length
    });

    return new Response(
      JSON.stringify(result),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )

  } catch (error) {
    console.error('‚ùå [ERREUR GLOBALE]', error);
    return new Response(
      JSON.stringify({ error: 'Erreur de recherche', details: error.message }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )
  }
})

import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const LOVABLE_API_KEY = Deno.env.get('LOVABLE_API_KEY');
    const SUPABASE_URL = Deno.env.get('SUPABASE_URL')!;
    const SUPABASE_SERVICE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;

    if (!LOVABLE_API_KEY) {
      throw new Error('LOVABLE_API_KEY not configured');
    }

    const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

    // Sélectionner le mot-clé à utiliser (priorité haute, jamais utilisé ou utilisé il y a >30 jours)
    const { data: keywords, error: keywordError } = await supabase
      .from('blog_keywords')
      .select('*')
      .eq('status', 'active')
      .or('last_used_at.is.null,last_used_at.lt.' + new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString())
      .order('priority', { ascending: false })
      .order('times_used', { ascending: true })
      .limit(1);

    if (keywordError) throw keywordError;

    if (!keywords || keywords.length === 0) {
      console.log('No keywords available for article generation');
      return new Response(
        JSON.stringify({ error: 'No keywords available' }),
        { status: 404, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const keyword = keywords[0];
    console.log(`Generating article for keyword: ${keyword.keyword}`);

    // Prompt optimisé SEO
    const systemPrompt = `Tu es un expert SEO et rédacteur web spécialisé dans les sorties, la vie nocturne et les rencontres à Paris.
Génère un article de blog optimisé SEO qui respecte EXACTEMENT cette structure JSON (renvoie UNIQUEMENT du JSON valide, rien d'autre):

{
  "title": "Titre H1 accrocheur avec le mot-clé principal (max 60 caractères)",
  "meta_title": "Meta title optimisé SEO (50-60 caractères)",
  "meta_description": "Meta description engageante (140-155 caractères)",
  "excerpt": "Résumé de l'article en 2-3 phrases (150 caractères)",
  "content": "Contenu HTML complet de l'article avec balises sémantiques"
}

RÈGLES STRICTES POUR LE CONTENU:
1. Structure HTML avec balises sémantiques (<article>, <header>, <section>, <h2>, <h3>, <p>, <ul>, <strong>, <em>)
2. Introduction de 150-200 mots avec le mot-clé dans les 100 premiers mots
3. 3-4 sections principales avec titres H2 pertinents
4. 2-3 sous-sections H3 par section
5. Paragraphes de 100-150 mots
6. Listes à puces pour améliorer la lisibilité
7. Conclusion avec CTA vers l'application Random
8. Densité du mot-clé: 1-2% (naturelle, pas de bourrage)
9. Longueur totale: 1500-2000 mots
10. Ton: naturel, engageant, informatif, optimiste

CONTEXTE APPLICATIF:
Random est une application qui permet de rencontrer 4 personnes inconnues dans un bar à Paris. L'application matche automatiquement les utilisateurs et leur assigne un bar. C'est parfait pour sortir de sa zone de confort, faire de nouvelles rencontres authentiques et découvrir de nouveaux bars parisiens.`;

    const userPrompt = `Génère un article SEO sur le mot-clé: "${keyword.keyword}"

L'article doit positionner Random comme LA solution pour les personnes qui cherchent à ${keyword.keyword.toLowerCase()}. 
Mets en avant les avantages: spontanéité, authenticité, découverte de bars, rencontres sans prise de tête.

Important: 
- Renvoie UNIQUEMENT du JSON valide
- Le contenu HTML doit être bien formaté avec des balises sémantiques
- Intègre naturellement le mot-clé sans forcer
- Termine avec un CTA subtil vers Random`;

    // Appel à l'API Lovable AI
    const aiResponse = await fetch('https://ai.gateway.lovable.dev/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${LOVABLE_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'google/gemini-2.5-flash',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        temperature: 0.7,
      }),
    });

    if (!aiResponse.ok) {
      const errorText = await aiResponse.text();
      console.error('AI API error:', aiResponse.status, errorText);
      throw new Error(`AI API error: ${aiResponse.status}`);
    }

    const aiData = await aiResponse.json();
    const generatedContent = aiData.choices?.[0]?.message?.content;

    if (!generatedContent) {
      throw new Error('No content generated by AI');
    }

    console.log('AI generated content successfully');

    // Parser la réponse JSON
    let articleData;
    try {
      // Extraire le JSON si enrobé dans du texte
      const jsonMatch = generatedContent.match(/\{[\s\S]*\}/);
      const jsonString = jsonMatch ? jsonMatch[0] : generatedContent;
      articleData = JSON.parse(jsonString);
    } catch (parseError) {
      console.error('Failed to parse AI response:', generatedContent);
      throw new Error('Invalid JSON response from AI');
    }

    // Générer un slug SEO-friendly
    const slug = keyword.keyword
      .toLowerCase()
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '')
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/^-|-$/g, '') + '-' + Date.now().toString(36);

    // Calculer un score SEO basique
    const content = articleData.content || '';
    const wordCount = content.split(/\s+/).length;
    const keywordCount = (content.match(new RegExp(keyword.keyword, 'gi')) || []).length;
    const keywordDensity = (keywordCount / wordCount) * 100;
    const hasH2 = content.includes('<h2>');
    const hasH3 = content.includes('<h3>');
    
    let seoScore = 50;
    if (wordCount >= 1500 && wordCount <= 2500) seoScore += 15;
    if (keywordDensity >= 1 && keywordDensity <= 2) seoScore += 15;
    if (hasH2) seoScore += 10;
    if (hasH3) seoScore += 10;

    // Insérer l'article dans la base de données
    const { data: article, error: insertError } = await supabase
      .from('blog_articles')
      .insert({
        keyword_id: keyword.id,
        slug,
        title: articleData.title,
        meta_title: articleData.meta_title,
        meta_description: articleData.meta_description,
        content: articleData.content,
        excerpt: articleData.excerpt,
        seo_score: Math.min(100, seoScore),
        status: 'draft',
        generated_by_ai: true,
      })
      .select()
      .single();

    if (insertError) throw insertError;

    // Mettre à jour les statistiques du mot-clé
    await supabase
      .from('blog_keywords')
      .update({
        last_used_at: new Date().toISOString(),
        times_used: keyword.times_used + 1,
      })
      .eq('id', keyword.id);

    // Mettre à jour le schedule
    const { data: schedule } = await supabase
      .from('blog_generation_schedule')
      .select('*')
      .single();

    if (schedule) {
      await supabase
        .from('blog_generation_schedule')
        .update({
          last_generation_at: new Date().toISOString(),
          next_generation_at: new Date(Date.now() + schedule.frequency_days * 24 * 60 * 60 * 1000).toISOString(),
          total_generated: schedule.total_generated + 1,
        })
        .eq('id', schedule.id);
    }

    console.log(`Article created successfully: ${article.slug} (Score SEO: ${seoScore})`);

    return new Response(
      JSON.stringify({
        success: true,
        article: {
          id: article.id,
          slug: article.slug,
          title: article.title,
          seo_score: seoScore,
        },
        keyword: keyword.keyword,
      }),
      { status: 200, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('Error in generate-seo-article:', error);
    return new Response(
      JSON.stringify({ 
        error: error instanceof Error ? error.message : 'Unknown error',
        details: error instanceof Error ? error.stack : undefined
      }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});

/**
 * Utilitaire centralis√© pour la d√©tection des utilisateurs en √éle-de-France
 * 
 * Utilise une approche hybride :
 * 1. D√©tection par coordonn√©es g√©ographiques (m√©thode principale)
 * 2. D√©tection par codes postaux (fallback)
 * 3. D√©tection par m√©tadonn√©es administratives
 */

export interface LocationMetadata {
  department?: string;
  region?: string;
  postalCode?: string;
}

/**
 * D√©tection IDF par coordonn√©es g√©ographiques (bounding box)
 * Couvre toute l'√éle-de-France de mani√®re math√©matiquement pr√©cise
 */
export function detectIdfByCoordinates(latitude: number, longitude: number): boolean {
  // Bounding box √éle-de-France
  const IDF_BOUNDS = {
    latMin: 48.1,
    latMax: 49.2,
    lngMin: 1.4,
    lngMax: 3.6
  };
  
  const isInIdf = latitude >= IDF_BOUNDS.latMin && 
                  latitude <= IDF_BOUNDS.latMax && 
                  longitude >= IDF_BOUNDS.lngMin && 
                  longitude <= IDF_BOUNDS.lngMax;
  
  console.log(`üó∫Ô∏è [IDF DETECTION] Coordonn√©es (${latitude}, ${longitude}) ‚Üí ${isInIdf ? 'IDF' : 'Hors IDF'}`);
  return isInIdf;
}

/**
 * D√©tection IDF par m√©tadonn√©es administratives
 */
export function detectIdfByMetadata(metadata: LocationMetadata): boolean {
  if (!metadata) return false;
  
  const { department, region, postalCode } = metadata;
  
  // V√©rification par r√©gion
  if (region?.toLowerCase().includes('√Æle-de-france')) {
    console.log('‚úÖ [IDF DETECTION] D√©tect√© par r√©gion:', region);
    return true;
  }
  
  // V√©rification par d√©partement IDF
  const idfDepartments = ['75', '77', '78', '91', '92', '93', '94', '95'];
  if (department && idfDepartments.includes(department)) {
    console.log('‚úÖ [IDF DETECTION] D√©tect√© par d√©partement:', department);
    return true;
  }
  
  // V√©rification par code postal
  if (postalCode) {
    const idfPostalCodes = /^(75|77|78|91|92|93|94|95)\d{3}$/;
    if (idfPostalCodes.test(postalCode)) {
      console.log('‚úÖ [IDF DETECTION] D√©tect√© par code postal:', postalCode);
      return true;
    }
  }
  
  return false;
}

/**
 * D√©tection IDF principale - utilise toutes les m√©thodes disponibles
 * Ordre de priorit√© : coordonn√©es > m√©tadonn√©es > codes postaux dans le nom
 */
export function detectIleDeFrance(
  locationName: string, 
  address?: string, 
  latitude?: number, 
  longitude?: number,
  metadata?: LocationMetadata
): boolean {
  console.log('üó∫Ô∏è [IDF DETECTION] Analyse compl√®te pour:', locationName);
  
  // 1. M√©thode principale : d√©tection par coordonn√©es
  if (latitude !== undefined && longitude !== undefined) {
    const coordResult = detectIdfByCoordinates(latitude, longitude);
    if (coordResult) {
      console.log('‚úÖ [IDF DETECTION] D√©tect√© par coordonn√©es');
      return true;
    }
  }
  
  // 2. D√©tection par m√©tadonn√©es administratives
  if (metadata && detectIdfByMetadata(metadata)) {
    console.log('‚úÖ [IDF DETECTION] D√©tect√© par m√©tadonn√©es');
    return true;
  }
  
  // 3. Fallback : d√©tection par codes postaux dans le nom/adresse
  const location = locationName.toLowerCase();
  const fullAddress = address?.toLowerCase() || '';
  const idfPostalCodes = /\b(75\d{3}|77\d{3}|78\d{3}|91\d{3}|92\d{3}|93\d{3}|94\d{3}|95\d{3})\b/;
  
  if (idfPostalCodes.test(location) || idfPostalCodes.test(fullAddress)) {
    console.log('‚úÖ [IDF DETECTION] D√©tect√© par code postal dans le nom');
    return true;
  }
  
  console.log('‚ùå [IDF DETECTION] Utilisateur hors IDF');
  return false;
}
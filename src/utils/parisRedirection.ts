import { LocationData } from '@/services/geolocation';
import { GeolocationService } from '@/services/geolocation';
import { detectIleDeFrance } from './idfDetection';
import { CoordinateValidator } from './coordinateValidation';

/**
 * Utilitaire pour rediriger les utilisateurs IDF vers Paris Centre
 * 
 * Utilise la d√©tection IDF am√©lior√©e avec coordonn√©es et m√©tadonn√©es
 * pour garantir une redirection pr√©cise de TOUS les utilisateurs IDF.
 */

// 6 zones strat√©giques de Paris intra-muros pour diversifier les recherches
export const PARIS_STRATEGIC_ZONES = [
  { latitude: 48.8606, longitude: 2.3475, locationName: 'Paris - Ch√¢telet' },
  { latitude: 48.8534, longitude: 2.3330, locationName: 'Paris - Saint-Germain' },
  { latitude: 48.8421, longitude: 2.3219, locationName: 'Paris - Montparnasse' },
  { latitude: 48.8676, longitude: 2.3635, locationName: 'Paris - R√©publique' },
  { latitude: 48.8532, longitude: 2.3697, locationName: 'Paris - Bastille' },
  { latitude: 48.8698, longitude: 2.3075, locationName: 'Paris - Champs-√âlys√©es' }
] as const;

// Fallback vers Ch√¢telet si besoin
export const PARIS_CENTRE_FALLBACK = PARIS_STRATEGIC_ZONES[0];

/**
 * S√©lectionne une zone strat√©gique al√©atoire parmi les 6 zones Paris intra-muros
 */
function selectRandomParisZone(): LocationData {
  const randomIndex = Math.floor(Math.random() * PARIS_STRATEGIC_ZONES.length);
  const selectedZone = PARIS_STRATEGIC_ZONES[randomIndex];
  
  console.log(`üé≤ [DIVERSIFICATION] Zone Paris s√©lectionn√©e (${randomIndex + 1}/6):`, selectedZone.locationName);
  
  return selectedZone;
}

/**
 * Retourne la location pour cr√©er/rechercher un groupe
 * - Si utilisateur IDF : Zone al√©atoire parmi 6 zones Paris intra-muros
 * - Si utilisateur hors IDF : location originale
 */
export function getGroupLocation(userLocation: LocationData): LocationData {
  console.log('üéØ [PARIS REDIRECTION] Analyse compl√®te de la location utilisateur...');
  console.log('üéØ [PARIS REDIRECTION] Location:', userLocation.locationName);
  console.log('üéØ [PARIS REDIRECTION] Coordonn√©es:', userLocation.latitude, userLocation.longitude);
  
  // R√©cup√©rer les m√©tadonn√©es du dernier reverse geocoding
  const metadata = GeolocationService.getLastLocationMetadata();
  
  // Utiliser la d√©tection IDF compl√®te avec toutes les m√©thodes
  const isIdfUser = detectIleDeFrance(
    userLocation.locationName,
    undefined, // pas d'adresse s√©par√©e
    userLocation.latitude,
    userLocation.longitude,
    metadata
  );
  
  if (isIdfUser) {
    const selectedZone = selectRandomParisZone();
    console.log('üó∫Ô∏è [PARIS REDIRECTION] Utilisateur IDF d√©tect√© ‚Üí Redirection vers zone Paris');
    console.log('üó∫Ô∏è [PARIS REDIRECTION] Redirection:', userLocation.locationName, '‚Üí', selectedZone.locationName);
    return selectedZone;
  }
  
  console.log('üìç [PARIS REDIRECTION] Utilisateur hors IDF ‚Üí Location originale conserv√©e (avec sanitisation)');
  
  // Sanitiser les coordonn√©es pour garantir max 6 d√©cimales
  const validationResult = CoordinateValidator.validateCoordinates(
    userLocation.latitude, 
    userLocation.longitude
  );
  
  if (!validationResult.isValid || !validationResult.sanitized) {
    console.error('üö® [PARIS REDIRECTION] Coordonn√©es invalides:', validationResult.error);
    // Fallback vers Paris Ch√¢telet si coordonn√©es invalides
    return PARIS_CENTRE_FALLBACK;
  }
  
  const sanitizedLocation: LocationData = {
    latitude: validationResult.sanitized.latitude,
    longitude: validationResult.sanitized.longitude,
    locationName: userLocation.locationName
  };
  
  console.log('‚úÖ [PARIS REDIRECTION] Coordonn√©es sanitis√©es:', sanitizedLocation.latitude, sanitizedLocation.longitude);
  return sanitizedLocation;
}
import { LocationData } from '@/services/geolocation';
import { GeolocationService } from '@/services/geolocation';
import { detectIleDeFrance } from './idfDetection';
import { CoordinateValidator } from './coordinateValidation';

/**
 * Utilitaire pour rediriger les utilisateurs IDF vers Paris Centre
 * 
 * Utilise la d√©tection IDF am√©lior√©e avec coordonn√©es et m√©tadonn√©es
 * pour garantir une redirection pr√©cise de TOUS les utilisateurs IDF.
 */

// Coordonn√©es de Paris Centre (Place du Ch√¢telet)
export const PARIS_CENTRE_COORDINATES = {
  latitude: 48.8566,
  longitude: 2.3522,
  locationName: 'Paris Centre'
} as const;

/**
 * Retourne la location pour cr√©er/rechercher un groupe
 * - Si utilisateur IDF : Paris Centre (force la compatibilit√©)
 * - Si utilisateur hors IDF : location originale
 */
export function getGroupLocation(userLocation: LocationData): LocationData {
  console.log('üéØ [PARIS REDIRECTION] Analyse compl√®te de la location utilisateur...');
  console.log('üéØ [PARIS REDIRECTION] Location:', userLocation.locationName);
  console.log('üéØ [PARIS REDIRECTION] Coordonn√©es:', userLocation.latitude, userLocation.longitude);
  
  // R√©cup√©rer les m√©tadonn√©es du dernier reverse geocoding
  const metadata = GeolocationService.getLastLocationMetadata();
  
  // Utiliser la d√©tection IDF compl√®te avec toutes les m√©thodes
  const isIdfUser = detectIleDeFrance(
    userLocation.locationName,
    undefined, // pas d'adresse s√©par√©e
    userLocation.latitude,
    userLocation.longitude,
    metadata
  );
  
  if (isIdfUser) {
    console.log('üó∫Ô∏è [PARIS REDIRECTION] Utilisateur IDF d√©tect√© ‚Üí Redirection vers Paris Centre');
    console.log('üó∫Ô∏è [PARIS REDIRECTION] Redirection:', userLocation.locationName, '‚Üí Paris Centre');
    return PARIS_CENTRE_COORDINATES;
  }
  
  console.log('üìç [PARIS REDIRECTION] Utilisateur hors IDF ‚Üí Location originale conserv√©e (avec sanitisation)');
  
  // Sanitiser les coordonn√©es pour garantir max 6 d√©cimales
  const validationResult = CoordinateValidator.validateCoordinates(
    userLocation.latitude, 
    userLocation.longitude
  );
  
  if (!validationResult.isValid || !validationResult.sanitized) {
    console.error('üö® [PARIS REDIRECTION] Coordonn√©es invalides:', validationResult.error);
    // Fallback vers Paris Centre si coordonn√©es invalides
    return PARIS_CENTRE_COORDINATES;
  }
  
  const sanitizedLocation: LocationData = {
    latitude: validationResult.sanitized.latitude,
    longitude: validationResult.sanitized.longitude,
    locationName: userLocation.locationName
  };
  
  console.log('‚úÖ [PARIS REDIRECTION] Coordonn√©es sanitis√©es:', sanitizedLocation.latitude, sanitizedLocation.longitude);
  return sanitizedLocation;
}
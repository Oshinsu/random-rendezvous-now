import { useState, useEffect, useCallback, useRef } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';
import { Group } from '@/types/database';
import { toast } from '@/hooks/use-toast';
import { GeolocationService, LocationData } from '@/services/geolocation';
import { GooglePlacesService } from '@/services/googlePlaces';

// Liste des bars parisiens pour la s√©lection al√©atoire (fallback seulement)
const PARIS_BARS = [
  { name: "Le Procope", address: "13 Rue de l'Ancienne Com√©die, 75006 Paris", lat: 48.8534, lng: 2.3371 },
  { name: "Harry's Bar", address: "5 Rue Daunou, 75002 Paris", lat: 48.8699, lng: 2.3314 },
  { name: "Le Mary Celeste", address: "1 Rue Commines, 75003 Paris", lat: 48.8596, lng: 2.3639 },
  { name: "Candelaria", address: "52 Rue de Saintonge, 75003 Paris", lat: 48.8625, lng: 2.3639 },
  { name: "Little Red Door", address: "60 Rue Charlot, 75003 Paris", lat: 48.8630, lng: 2.3652 },
  { name: "Le Syndicat", address: "51 Rue du Faubourg Saint-Antoine, 75011 Paris", lat: 48.8532, lng: 2.3724 },
  { name: "Hemingway Bar", address: "15 Place Vend√¥me, 75001 Paris", lat: 48.8670, lng: 2.3292 },
  { name: "Le Bar du Plaza", address: "25 Avenue Montaigne, 75008 Paris", lat: 48.8665, lng: 2.3065 },
  { name: "Moonshiner", address: "5 Rue Sedaine, 75011 Paris", lat: 48.8553, lng: 2.3714 },
  { name: "Glass", address: "7 Rue Frochot, 75009 Paris", lat: 48.8823, lng: 2.3367 }
];

export interface GroupMember {
  id: string;
  name: string;
  isConnected: boolean;
  joinedAt: string;
  status: 'confirmed' | 'pending';
  lastSeen?: string; // Ajout du champ last_seen
}

// Global channel reference to prevent multiple subscriptions
let globalChannel: any = null;
let subscriberCount = 0;

// Cache pour √©viter les messages syst√®me r√©p√©titifs - AM√âLIOR√â
const sentSystemMessages = new Set<string>();
const lastBarAssignmentTime = new Map<string, number>();

export const useGroups = () => {
  const { user } = useAuth();
  const [groups, setGroups] = useState<Group[]>([]);
  const [userGroups, setUserGroups] = useState<Group[]>([]);
  const [groupMembers, setGroupMembers] = useState<GroupMember[]>([]);
  const [loading, setLoading] = useState(false);
  const [userLocation, setUserLocation] = useState<LocationData | null>(null);
  const fetchingRef = useRef(false);
  const lastFetchRef = useRef<number>(0);
  const syncingGroupsRef = useRef(new Set<string>()); // Track des groupes en cours de synchronisation

  // Fonction pour mettre √† jour le last_seen de l'utilisateur actuel
  const updateUserLastSeen = useCallback(async (groupId: string) => {
    if (!user) return;
    
    try {
      const { error } = await supabase
        .from('group_participants')
        .update({ last_seen: new Date().toISOString() })
        .eq('group_id', groupId)
        .eq('user_id', user.id);
      
      if (error) {
        console.error('‚ùå Erreur mise √† jour last_seen:', error);
      } else {
        console.log('‚úÖ Last_seen mis √† jour pour le groupe:', groupId);
      }
    } catch (error) {
      console.error('‚ùå Erreur updateUserLastSeen:', error);
    }
  }, [user]);

  // Fonction pour d√©terminer si un utilisateur est "connect√©" bas√© sur last_seen
  const isUserConnected = (lastSeen: string): boolean => {
    const lastSeenDate = new Date(lastSeen);
    const now = new Date();
    const diffMinutes = (now.getTime() - lastSeenDate.getTime()) / (1000 * 60);
    
    // Consid√©rer un utilisateur comme connect√© s'il a √©t√© vu dans les 10 derni√®res minutes
    return diffMinutes <= 10;
  };

  // Obtenir la g√©olocalisation de l'utilisateur au montage
  useEffect(() => {
    const getUserLocation = async () => {
      try {
        const location = await GeolocationService.getCurrentLocation();
        setUserLocation(location);
        console.log('üìç Position utilisateur obtenue:', location);
      } catch (error) {
        console.warn('‚ö†Ô∏è Impossible d\'obtenir la position:', error);
        toast({
          title: '‚ö†Ô∏è G√©olocalisation non disponible',
          description: 'La recherche de bars sera moins pr√©cise sans votre position.',
          variant: 'destructive'
        });
      }
    };

    getUserLocation();
  }, []);

  // Fonction pour envoyer un message syst√®me au chat du groupe (AM√âLIOR√âE contre le spam)
  const sendGroupSystemMessage = async (groupId: string, message: string) => {
    try {
      // Cr√©er une cl√© unique pour ce message et groupe
      const messageKey = `${groupId}:${message}`;
      
      // V√©rifier si ce message a d√©j√† √©t√© envoy√© r√©cemment (plus strict)
      if (sentSystemMessages.has(messageKey)) {
        console.log('üö´ Message syst√®me d√©j√† envoy√© r√©cemment, ignor√©:', message);
        return;
      }

      // V√©rifier sp√©cifiquement pour les messages de bar assign√©
      if (message.includes('Rendez-vous au')) {
        const lastTime = lastBarAssignmentTime.get(groupId) || 0;
        const now = Date.now();
        if (now - lastTime < 60000) { // 1 minute minimum entre les messages d'assignation
          console.log('üö´ Message d\'assignation de bar trop r√©cent, ignor√©');
          return;
        }
        lastBarAssignmentTime.set(groupId, now);
      }

      const { error } = await supabase
        .from('group_messages')
        .insert({
          group_id: groupId,
          user_id: '00000000-0000-0000-0000-000000000000', // ID factice pour les messages syst√®me
          message: message,
          is_system: true
        });

      if (error) {
        console.error('‚ùå Erreur envoi message syst√®me groupe:', error);
      } else {
        console.log('‚úÖ Message syst√®me envoy√© au groupe:', message);
        // Ajouter au cache et supprimer apr√®s 2 minutes (plus long)
        sentSystemMessages.add(messageKey);
        setTimeout(() => {
          sentSystemMessages.delete(messageKey);
        }, 120000);
      }
    } catch (error) {
      console.error('‚ùå Erreur sendGroupSystemMessage:', error);
    }
  };

  // Fonction pour r√©cup√©rer les membres d'un groupe AVEC NOUVEAU SYST√àME last_seen
  const fetchGroupMembers = useCallback(async (groupId: string) => {
    try {
      console.log('üë• [LAST_SEEN] R√©cup√©ration des membres avec statut de connexion:', groupId);
      
      // √âTAPE 1: R√©cup√©rer TOUS les participants confirm√©s avec last_seen
      const { data: participantsData, error: participantsError } = await supabase
        .from('group_participants')
        .select(`
          id,
          user_id,
          joined_at,
          status,
          last_seen
        `)
        .eq('group_id', groupId)
        .eq('status', 'confirmed')
        .order('joined_at', { ascending: true });

      if (participantsError) {
        console.error('‚ùå Erreur r√©cup√©ration participants:', participantsError);
        throw participantsError;
      }

      const realParticipantCount = participantsData?.length || 0;
      console.log('üîç [LAST_SEEN] Nombre R√âEL de participants confirm√©s:', realParticipantCount);

      // √âTAPE 2: V√©rifier le comptage dans la table groups
      const { data: currentGroup, error: groupError } = await supabase
        .from('groups')
        .select('current_participants, status')
        .eq('id', groupId)
        .single();

      if (groupError) {
        console.error('‚ùå Erreur r√©cup√©ration groupe:', groupError);
      } else {
        console.log('üìä [LAST_SEEN] Comptage actuel en BDD:', currentGroup.current_participants, 'vs r√©el:', realParticipantCount);
        
        // √âTAPE 3: FORCER la correction si les comptages ne correspondent pas
        if (currentGroup.current_participants !== realParticipantCount) {
          console.log('üö® [LAST_SEEN] INCOH√âRENCE D√âTECT√âE ! Correction forc√©e...');
          
          // D√©terminer le nouveau statut
          let newStatus = currentGroup.status;
          let updateData: any = {
            current_participants: realParticipantCount
          };

          // Si moins de 5 participants, remettre en waiting et supprimer le bar
          if (realParticipantCount < 5 && currentGroup.status === 'confirmed') {
            newStatus = 'waiting';
            updateData = {
              ...updateData,
              status: 'waiting',
              bar_name: null,
              bar_address: null,
              meeting_time: null,
              bar_latitude: null,
              bar_longitude: null,
              bar_place_id: null
            };
            console.log('‚è≥ [LAST_SEEN] Remise en waiting et suppression du bar');
          }

          // Appliquer la correction
          const { error: correctionError } = await supabase
            .from('groups')
            .update(updateData)
            .eq('id', groupId);

          if (correctionError) {
            console.error('‚ùå [LAST_SEEN] Erreur lors de la correction:', correctionError);
          } else {
            console.log('‚úÖ [LAST_SEEN] Comptage corrig√© avec succ√®s:', realParticipantCount);
          }
        }
      }

      if (!participantsData) {
        setGroupMembers([]);
        return [];
      }

      // √âTAPE 4: Transformer les donn√©es avec noms masqu√©s ET statut de connexion
      const members: GroupMember[] = participantsData.map((participant: any, index: number) => {
        const maskedName = `Rander ${index + 1}`;
        const lastSeenValue = participant.last_seen || participant.joined_at;
        const isConnected = isUserConnected(lastSeenValue);

        return {
          id: participant.id,
          name: maskedName,
          isConnected: isConnected,
          joinedAt: participant.joined_at,
          status: participant.status as 'confirmed' | 'pending',
          lastSeen: lastSeenValue
        };
      });

      console.log('‚úÖ [LAST_SEEN] Membres finaux avec statut de connexion:', members.map(m => ({ name: m.name, connected: m.isConnected })));
      setGroupMembers(members);
      return members;
    } catch (error) {
      console.error('‚ùå Erreur fetchGroupMembers:', error);
      setGroupMembers([]);
      return [];
    }
  }, []);

  // FONCTION AM√âLIOR√âE pour nettoyer compl√®tement l'√©tat apr√®s avoir quitt√© un groupe
  const clearUserGroupsState = useCallback(() => {
    console.log('üßπ Nettoyage complet de l\'√©tat des groupes utilisateur');
    setUserGroups([]);
    setGroupMembers([]);
    setGroups([]);
  }, []);

  const fetchUserGroups = useCallback(async () => {
    if (!user || fetchingRef.current) {
      console.log('üö´ Fetch bloqu√© - utilisateur:', !!user, 'en cours:', fetchingRef.current);
      return;
    }
    
    // √âviter les appels trop fr√©quents (R√âDUIT pour plus de r√©activit√©)
    const now = Date.now();
    if (now - lastFetchRef.current < 1000) { // R√©duit √† 1 seconde
      console.log('üö´ Fetch trop fr√©quent, ignor√©');
      return;
    }
    
    fetchingRef.current = true;
    lastFetchRef.current = now;
    setLoading(true);
    
    try {
      console.log('üîÑ [LAST_SEEN] R√©cup√©ration des groupes pour:', user.id);
      
      const { data: participations, error: participationError } = await supabase
        .from('group_participants')
        .select('group_id')
        .eq('user_id', user.id)
        .eq('status', 'confirmed');

      if (participationError) {
        console.error('‚ùå Erreur participations:', participationError);
        throw participationError;
      }

      console.log('‚úÖ Participations trouv√©es:', participations?.length || 0);

      if (!participations || participations.length === 0) {
        console.log('üì≠ Aucune participation trouv√©e - nettoyage de l\'√©tat');
        clearUserGroupsState();
        return;
      }

      const groupIds = participations.map(p => p.group_id);
      
      const { data: groupsData, error: groupsError } = await supabase
        .from('groups')
        .select('*')
        .in('id', groupIds)
        .order('created_at', { ascending: false });

      if (groupsError) {
        console.error('‚ùå Erreur groupes:', groupsError);
        throw groupsError;
      }

      console.log('‚úÖ [LAST_SEEN] Groupes r√©cup√©r√©s avant correction:', groupsData?.length || 0);

      // CORRECTION OBLIGATOIRE: V√©rifier et corriger CHAQUE groupe
      if (groupsData && groupsData.length > 0) {
        for (const group of groupsData) {
          console.log(`üîç [LAST_SEEN] V√©rification du groupe ${group.id}...`);
          await fetchGroupMembers(group.id);
          // Mettre √† jour le last_seen de l'utilisateur pour ce groupe
          await updateUserLastSeen(group.id);
        }
        
        // Re-fetch les groupes apr√®s toutes les corrections
        const { data: correctedGroups } = await supabase
          .from('groups')
          .select('*')
          .in('id', groupIds)
          .order('created_at', { ascending: false });
        
        const finalGroups = (correctedGroups || []) as Group[];
        console.log('üìä [LAST_SEEN] Groupes apr√®s correction compl√®te:', finalGroups);
        setUserGroups(finalGroups);

        // Charger les membres du premier groupe actif (apr√®s correction)
        if (finalGroups.length > 0) {
          await fetchGroupMembers(finalGroups[0].id);
        }
      } else {
        console.log('üì≠ Aucun groupe valide trouv√© apr√®s r√©cup√©ration');
        clearUserGroupsState();
      }
    } catch (error) {
      console.error('‚ùå Erreur fetchUserGroups:', error);
      toast({ 
        title: 'Erreur', 
        description: 'Impossible de r√©cup√©rer vos groupes.', 
        variant: 'destructive' 
      });
    } finally {
      setLoading(false);
      fetchingRef.current = false;
    }
  }, [user, fetchGroupMembers, clearUserGroupsState, updateUserLastSeen]);

  // Fonction am√©lior√©e pour synchroniser le comptage des participants (SIMPLIFI√âE)
  const syncGroupParticipantCount = async (groupId: string) => {
    // Cette fonction est maintenant int√©gr√©e dans fetchGroupMembers
    // pour √©viter les doublons et assurer une correction syst√©matique
    console.log('üîÑ [SYNC] Synchronisation d√©l√©gu√©e √† fetchGroupMembers pour:', groupId);
  };

  // Fonction helper pour obtenir le nombre actuel de participants
  const getCurrentParticipantCount = async (groupId: string): Promise<number> => {
    try {
      const { data, error } = await supabase
        .from('group_participants')
        .select('id')
        .eq('group_id', groupId)
        .eq('status', 'confirmed');
      
      if (error) {
        console.error('‚ùå Erreur comptage participants:', error);
        return 0;
      }
      
      return data?.length || 0;
    } catch (error) {
      console.error('‚ùå Erreur getCurrentParticipantCount:', error);
      return 0;
    }
  };

  // Fonction pour trouver un groupe compatible g√©ographiquement
  const findCompatibleGroup = async (userLocation: LocationData): Promise<Group | null> => {
    try {
      console.log('üåç Recherche de groupe compatible g√©ographiquement...');
      
      const { data: waitingGroups, error } = await supabase
        .from('groups')
        .select('*')
        .eq('status', 'waiting')
        .lt('current_participants', 5)
        .not('latitude', 'is', null)
        .not('longitude', 'is', null)
        .order('created_at', { ascending: true });

      if (error) {
        console.error('‚ùå Erreur recherche groupes g√©olocalis√©s:', error);
        return null;
      }

      if (!waitingGroups || waitingGroups.length === 0) {
        console.log('üìç Aucun groupe g√©olocalis√© trouv√©');
        return null;
      }

      // Chercher un groupe dans un rayon raisonnable (par exemple 20km)
      const maxDistance = 20000; // 20km en m√®tres
      
      for (const group of waitingGroups) {
        if (group.latitude && group.longitude) {
          const distance = calculateDistance(
            userLocation.latitude,
            userLocation.longitude,
            group.latitude,
            group.longitude
          );
          
          if (distance <= maxDistance) {
            console.log(`‚úÖ Groupe compatible trouv√© √† ${Math.round(distance / 1000)}km:`, group.id);
            return group as Group;
          }
        }
      }

      console.log('üìç Aucun groupe dans la zone g√©ographique trouv√©');
      return null;
    } catch (error) {
      console.error('‚ùå Erreur findCompatibleGroup:', error);
      return null;
    }
  };

  // Fonction helper pour calculer la distance entre deux points
  const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
    const R = 6371000; // Rayon de la Terre en m√®tres
    const œÜ1 = lat1 * Math.PI / 180;
    const œÜ2 = lat2 * Math.PI / 180;
    const ŒîœÜ = (lat2 - lat1) * Math.PI / 180;
    const ŒîŒª = (lon2 - lon1) * Math.PI / 180;

    const a = Math.sin(ŒîœÜ / 2) * Math.sin(ŒîœÜ / 2) +
              Math.cos(œÜ1) * Math.cos(œÜ2) *
              Math.sin(ŒîŒª / 2) * Math.sin(ŒîŒª / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

    return R * c;
  };

  // Fonction pour rejoindre un groupe al√©atoire - MISE √Ä JOUR avec last_seen
  const joinRandomGroup = async () => {
    if (!user) {
      toast({ 
        title: 'Erreur', 
        description: 'Vous devez √™tre connect√© pour rejoindre un groupe.', 
        variant: 'destructive' 
      });
      return false;
    }

    if (loading) {
      console.log('‚è≥ Op√©ration d√©j√† en cours...');
      return false;
    }

    console.log('üé≤ [LAST_SEEN] D√©marrage joinRandomGroup pour:', user.id);
    setLoading(true);
    
    try {
      // V√©rifier les participations existantes
      const { data: existingParticipation, error: checkError } = await supabase
        .from('group_participants')
        .select('group_id, groups!inner(status)')
        .eq('user_id', user.id)
        .eq('status', 'confirmed')
        .in('groups.status', ['waiting', 'confirmed']);

      if (checkError) {
        console.error('‚ùå Erreur de v√©rification:', checkError);
        throw checkError;
      }

      if (existingParticipation && existingParticipation.length > 0) {
        console.log('‚ö†Ô∏è Utilisateur d√©j√† dans un groupe actif');
        toast({ 
          title: 'D√©j√† dans un groupe', 
          description: 'Vous √™tes d√©j√† dans un groupe actif !', 
          variant: 'destructive' 
        });
        return false;
      }

      let targetGroup: Group | null = null;

      // 1. Essayer de trouver un groupe compatible g√©ographiquement
      if (userLocation) {
        targetGroup = await findCompatibleGroup(userLocation);
      }

      // 2. Si pas de groupe g√©olocalis√© compatible, chercher un groupe classique
      if (!targetGroup) {
        const { data: waitingGroups, error: groupError } = await supabase
          .from('groups')
          .select('*')
          .eq('status', 'waiting')
          .lt('current_participants', 5)
          .order('created_at', { ascending: true })
          .limit(1);

        if (groupError) {
          console.error('‚ùå Erreur de recherche de groupes:', groupError);
          throw groupError;
        }

        if (waitingGroups && waitingGroups.length > 0) {
          targetGroup = waitingGroups[0] as Group;
          console.log('üîó Rejoindre le groupe existant:', targetGroup.id);
        }
      }

      // 3. Si toujours aucun groupe, cr√©er un nouveau groupe
      if (!targetGroup) {
        console.log('üÜï Cr√©ation d\'un nouveau groupe...');
        const newGroupData: any = {
          status: 'waiting',
          max_participants: 5,
          current_participants: 0
        };

        // Ajouter la g√©olocalisation si disponible avec rayon de 10km par d√©faut
        if (userLocation) {
          newGroupData.latitude = userLocation.latitude;
          newGroupData.longitude = userLocation.longitude;
          newGroupData.location_name = userLocation.locationName;
          newGroupData.search_radius = 10000; // 10km par d√©faut
          console.log('üìç Nouveau groupe avec g√©olocalisation:', {
            location: userLocation.locationName,
            coordinates: `${userLocation.latitude}, ${userLocation.longitude}`,
            radius: '10km'
          });
        }

        const { data: newGroup, error: createError } = await supabase
          .from('groups')
          .insert(newGroupData)
          .select()
          .single();

        if (createError) {
          console.error('‚ùå Erreur de cr√©ation de groupe:', createError);
          throw createError;
        }

        targetGroup = newGroup as Group;
        console.log('‚úÖ Nouveau groupe cr√©√©:', targetGroup.id);
      }

      // Ajouter l'utilisateur au groupe avec last_seen initialis√©
      const participantData: any = {
        group_id: targetGroup.id,
        user_id: user.id,
        status: 'confirmed',
        last_seen: new Date().toISOString() // Initialiser last_seen
      };

      // Ajouter la g√©olocalisation du participant si disponible
      if (userLocation) {
        participantData.latitude = userLocation.latitude;
        participantData.longitude = userLocation.longitude;
        participantData.location_name = userLocation.locationName;
      }

      const { error: joinError } = await supabase
        .from('group_participants')
        .insert(participantData);

      if (joinError) {
        console.error('‚ùå Erreur d\'ajout au groupe:', joinError);
        throw joinError;
      }

      console.log('‚úÖ [LAST_SEEN] Utilisateur ajout√© au groupe avec last_seen initialis√©');

      // Attendre un peu avant de rafra√Æchir pour √©viter les conflits
      setTimeout(() => {
        fetchUserGroups();
      }, 1000);
      
      return true;
    } catch (error) {
      console.error('‚ùå Erreur dans joinRandomGroup:', error);
      toast({ 
        title: 'Erreur', 
        description: 'Impossible de rejoindre un groupe. Veuillez r√©essayer.', 
        variant: 'destructive' 
      });
      return false;
    } finally {
      setLoading(false);
    }
  };

  // FONCTION AM√âLIOR√âE pour quitter un groupe avec nettoyage complet
  const leaveGroup = async (groupId: string) => {
    if (!user || loading) {
      console.log('üö´ Impossible de quitter - pas d\'utilisateur ou chargement en cours');
      return;
    }

    setLoading(true);
    try {
      console.log('üö™ [LAST_SEEN] Quitter le groupe:', groupId, 'utilisateur:', user.id);

      // √âTAPE 1: Nettoyer imm√©diatement l'√©tat local pour un feedback visuel instantan√©
      console.log('üßπ Nettoyage imm√©diat de l\'√©tat local');
      clearUserGroupsState();

      // √âTAPE 2: Supprimer la participation avec v√©rification explicite de l'utilisateur
      const { error: deleteError } = await supabase
        .from('group_participants')
        .delete()
        .eq('group_id', groupId)
        .eq('user_id', user.id)
        .eq('status', 'confirmed');

      if (deleteError) {
        console.error('‚ùå Erreur pour supprimer la participation:', deleteError);
        throw deleteError;
      }

      console.log('‚úÖ [LAST_SEEN] Participation supprim√©e avec succ√®s');

      // √âTAPE 3: FORCER la correction du comptage imm√©diatement
      const realCount = await getCurrentParticipantCount(groupId);
      console.log('üìä [LAST_SEEN] Participants restants apr√®s d√©part:', realCount);

      if (realCount === 0) {
        // Supprimer le groupe s'il est vide
        console.log('üóëÔ∏è [LAST_SEEN] Suppression du groupe vide');
        await supabase
          .from('groups')
          .delete()
          .eq('id', groupId);
      } else {
        // Mettre √† jour le comptage et remettre en waiting si n√©cessaire
        let updateData: any = {
          current_participants: realCount
        };

        if (realCount < 5) {
          updateData = {
            ...updateData,
            status: 'waiting',
            bar_name: null,
            bar_address: null,
            meeting_time: null,
            bar_latitude: null,
            bar_longitude: null,
            bar_place_id: null
          };
          console.log('‚è≥ [LAST_SEEN] Remise en waiting et suppression du bar');
        }

        await supabase
          .from('groups')
          .update(updateData)
          .eq('id', groupId);
      }

      toast({ 
        title: '‚úÖ Groupe quitt√©', 
        description: 'Vous avez quitt√© le groupe avec succ√®s.' 
      });
      
      // √âTAPE 4: Forcer une v√©rification finale apr√®s un d√©lai
      setTimeout(() => {
        console.log('üîÑ V√©rification finale des groupes utilisateur');
        fetchUserGroups();
      }, 2000);
      
    } catch (error) {
      console.error('‚ùå Erreur pour quitter le groupe:', error);
      toast({ 
        title: 'Erreur', 
        description: 'Impossible de quitter le groupe. Veuillez r√©essayer.', 
        variant: 'destructive' 
      });
      // En cas d'erreur, re-fetch pour s'assurer de l'√©tat correct
      setTimeout(() => {
        fetchUserGroups();
      }, 1000);
    } finally {
      setLoading(false);
    }
  };

  // Effect pour charger les groupes au montage et quand l'utilisateur change
  useEffect(() => {
    if (user) {
      console.log('üîÑ Utilisateur d√©tect√©, chargement des groupes...');
      fetchUserGroups();
    } else {
      console.log('üö´ Pas d\'utilisateur, reset des groupes');
      clearUserGroupsState();
    }
  }, [user?.id, fetchUserGroups, clearUserGroupsState]);

  // ‚ûú Souscription en temps r√©el aux changements de participations utilisateur ET de groupes (AM√âLIOR√âE)
  useEffect(() => {
    if (!user) return;

    // Incr√©menter le compteur d'abonn√©s
    subscriberCount++;
    console.log('üì° Nouveaux abonn√©s:', subscriberCount);

    // Cr√©er ou r√©utiliser le canal global
    if (!globalChannel) {
      console.log('üõ∞Ô∏è Cr√©ation du canal realtime global');
      globalChannel = supabase
        .channel('global-group-changes')
        .on(
          'postgres_changes',
          {
            event: '*',
            schema: 'public',
            table: 'group_participants',
          },
          (payload) => {
            console.log('üõ∞Ô∏è [LAST_SEEN] Changement d√©tect√© sur group_participants:', payload);
            
            // D√©bounce plus court pour plus de r√©activit√©
            const debounceKey = 'realtime-participants-update';
            clearTimeout((window as any)[debounceKey]);
            (window as any)[debounceKey] = setTimeout(() => {
              fetchUserGroups();
            }, 800); // R√©duit √† 800ms
          }
        )
        .on(
          'postgres_changes',
          {
            event: '*',
            schema: 'public',
            table: 'groups',
          },
          (payload) => {
            console.log('üõ∞Ô∏è [LAST_SEEN] Changement d√©tect√© sur groups:', payload);
            
            // D√©bounce encore plus court pour les mises √† jour de groupes (assignation de bar)
            const debounceKey = 'realtime-groups-update';
            clearTimeout((window as any)[debounceKey]);
            (window as any)[debounceKey] = setTimeout(() => {
              fetchUserGroups();
            }, 500); // Tr√®s r√©actif pour les mises √† jour de bar
          }
        )
        .subscribe();
    }

    return () => {
      // D√©cr√©menter le compteur d'abonn√©s
      subscriberCount--;
      console.log('üì° Abonn√©s restants:', subscriberCount);

      // Nettoyer le canal seulement quand il n'y a plus d'abonn√©s
      if (subscriberCount <= 0 && globalChannel) {
        console.log('üõ∞Ô∏è Fermeture du canal realtime global');
        supabase.removeChannel(globalChannel);
        globalChannel = null;
      }
    };
  }, [user?.id, fetchUserGroups]);

  // Effect pour mettre √† jour p√©riodiquement le last_seen de l'utilisateur
  useEffect(() => {
    if (!user || userGroups.length === 0) return;

    const updateLastSeenPeriodically = () => {
      userGroups.forEach(group => {
        updateUserLastSeen(group.id);
      });
    };

    // Mettre √† jour le last_seen toutes les 2 minutes
    const interval = setInterval(updateLastSeenPeriodically, 2 * 60 * 1000);

    return () => clearInterval(interval);
  }, [user, userGroups, updateUserLastSeen]);

  return {
    groups,
    userGroups,
    groupMembers,
    loading,
    userLocation,
    joinRandomGroup,
    leaveGroup,
    fetchUserGroups,
    fetchGroupMembers
  };
};
